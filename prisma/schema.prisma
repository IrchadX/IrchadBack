generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model user {
  id                   Int                    @id @default(autoincrement())
  created_at           DateTime               @default(now()) @db.Timestamptz(6)
  family_name          String?                @db.VarChar
  first_name           String?                @db.VarChar
  phone_number         String?                @db.VarChar
  password             String?                @db.VarChar
  userTypeId           Int?
  email                String?                @unique @db.VarChar
  sex                  String?                @db.VarChar
  street               String?                @db.VarChar
  city                 String?                @db.VarChar
  birth_date           DateTime?
  env_user             env_user[]
  environment          environment[]
  intervention_history intervention_history[]
  userType             user_type?             @relation(fields: [userTypeId], references: [id])
}

model user_type {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  type       String?  @db.VarChar
  user       user[]
}

model environment {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar
  description String?    @db.VarChar
  is_public   Boolean?
  user_id     Int?
  address     String?    @db.VarChar
  created_at  DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?  @db.Timestamp(6)
  format_id   Int?
  env_user    env_user[]
  format      format?    @relation(fields: [format_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user?      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  pois        poi[]
  zone        zone[]
}

model env_delimiter {
  id          Int       @id @default(autoincrement())
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamp(6)
  env_id      Int?
  coordinates Json?     @db.Json
}

model zone {
  id          Int          @id @default(autoincrement())
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  env_id      Int?
  name        String?      @db.VarChar
  description String?      @db.VarChar
  type_id     Int?
  coordinates Json?        @db.Json
  updated_at  DateTime?    @db.Timestamp(6)
  poi_zone    poi_zone[]
  environment environment? @relation(fields: [env_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model poi {
  id          Int           @id @default(autoincrement())
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  env_id      Int?
  category_id Int?
  name        String?       @db.VarChar
  description String?       @db.VarChar
  coordinates Json?         @db.Json
  image_url   String?       @db.VarChar
  category    poi_category? @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  environment environment?  @relation(fields: [env_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  poi_zone    poi_zone[]
}

model poi_zone {
  id         Int      @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  poi_id     Int?
  zone_id    Int?
  poi        poi?     @relation(fields: [poi_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  zone       zone?    @relation(fields: [zone_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model alert {
  id        Int      @id @default(autoincrement())
  type      String
  time      DateTime @db.Time(6)
  date      DateTime @db.Date
  zone      String
  status    String
  device_id Int
  level     String
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model device {
  id               Int      @id @default(autoincrement())
  type_id          Int
  state_type_id    Int
  user_id          Int?
  mac_address      String   @db.VarChar
  software_version String   @db.VarChar
  date_of_service  DateTime @db.Date
  comm_state       Boolean
  connection_state Boolean? @default(true)
}

model device_type {
  id   Int    @id @default(autoincrement())
  type String @unique @db.VarChar(100)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model env_user {
  id          Int          @id @default(autoincrement())
  user_id     Int
  env_id      Int?
  environment environment? @relation(fields: [env_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model format {
  id          Int           @id @default(autoincrement())
  format      String        @db.VarChar
  environment environment[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model intervention_history {
  id               Int       @id @default(autoincrement())
  device_id        Int?
  maintenancier_id Int?
  scheduled_date   DateTime  @db.Timestamp(6)
  completion_date  DateTime? @db.Timestamp(6)
  description      String?
  type             String?
  status           String?
  user             user?     @relation(fields: [maintenancier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model poi_category {
  id       Int    @id @default(autoincrement())
  category String @db.VarChar
  pois     poi[]
}

model state_type {
  id    Int    @id @default(autoincrement())
  state String @unique @db.VarChar(50)
}
